{
  "schema_version": "1.0.0",
  "elements": [
    {
      "description": "An element that computes number of bytes in `String`, `ArrayBuffer`, `Blob`\n(and therefore `File`) and in supported browsers `FormData`.\n\nNote that Safari is excluded from FormData tests because there's some bug in\nWebKit iplementation of the Request object and it doesn't read FormData\nproperly. Chrome had similar bug but they fixed it already. See demo page\nto check if your browser support FormData.\n\n### Example\n```\n<textarea value=\"{{value::input}}\"></textarea>\n<bytes-counter value=\"[[value]]\" bytes=\"{{bytes}}\"></bytes-counter>\n```\n\nIn the example above the `bytes` variable contains size of the input.\n\nNote that computations are synchronous and there is a delay between setting the\n`value` property (or calling `calculate()` function) and getting a result.\n\n## New in version 2\n\n- It does not include polyfills. Include polyfills library if you targeting\nolder browsers. Polyfill required for fetch API to support FormData.",
      "summary": "",
      "path": "bytes-counter.js",
      "properties": [
        {
          "name": "value",
          "type": "string | null | undefined",
          "description": "A value to be evaluated.\nIt can be text, blob (and therefore File), ArrayBuffer or FormData",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 54,
              "column": 6
            },
            "end": {
              "line": 57,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {
              "observer": "\"calculate\"",
              "attributeType": "String"
            }
          }
        },
        {
          "name": "bytes",
          "type": "number | null | undefined",
          "description": "Calculated number of bytes from the `value`",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 61,
              "column": 6
            },
            "end": {
              "line": 65,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {
              "notify": true,
              "readOnly": true,
              "attributeType": "Number"
            }
          }
        }
      ],
      "methods": [
        {
          "name": "calculate",
          "description": "Calculates number of bytes in the `value`.\n\nAfter computation it sets `bytes` property of the element.\n\nThis function returns Promise but you may want to use synchronous versions\nfor values that contains a method to read size synchronously. Not all\nvalues can be processed synchronously (FormData for example).",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 84,
              "column": 2
            },
            "end": {
              "line": 119,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "value",
              "type": "(String | ArrayBuffer | Blob | File | FormData)",
              "description": "A value to compute\nnumber of bytes from."
            }
          ],
          "return": {
            "type": "Promise.<Number>",
            "desc": "Promise with number of bytes in the `value`. If\nthe `value` is not one of the supported types then the promise will\nresolve to `undefined`;"
          }
        },
        {
          "name": "_handleBuffer",
          "description": "Handles buffer size calculation.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 126,
              "column": 2
            },
            "end": {
              "line": 132,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "buffer",
              "type": "ArrayBuffer",
              "description": "Buffer created from the body."
            }
          ],
          "return": {
            "type": "Promise",
            "desc": "Promise resolved to number of bytes in the buffer."
          }
        },
        {
          "name": "stringBytes",
          "description": "Calculates number of bytes in string.\n\nSee: http://stackoverflow.com/a/23329386/1127848",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 141,
              "column": 2
            },
            "end": {
              "line": 155,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "str",
              "type": "String",
              "description": "A value to evaluate"
            }
          ],
          "return": {
            "type": "Number",
            "desc": "Number of bytes in the string."
          }
        },
        {
          "name": "blobBytes",
          "description": "Calculates number of bytes in Blob (and therefore in File).",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 162,
              "column": 2
            },
            "end": {
              "line": 164,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "blob",
              "type": "(Blob | File)",
              "description": "A value to evaluate"
            }
          ],
          "return": {
            "type": "Number",
            "desc": "Number of bytes in the blob."
          }
        },
        {
          "name": "bufferBytes",
          "description": "Calculates number of bytes in ArrayBuffer.\n\nNote, it is only possible to read number of allocated bytes by the buffer,\neven if they are not containig any value. It is a size of the buffer at\nthe time it was created.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 175,
              "column": 2
            },
            "end": {
              "line": 177,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "buffer",
              "type": "ArrayBuffer",
              "description": "A value to evaluate"
            }
          ],
          "return": {
            "type": "Number",
            "desc": "Number of bytes in the buffer."
          }
        },
        {
          "name": "_bodyToArrayBuffer",
          "description": "Transfer any object that is acceptable as a bidy parameter in the Request\nobject to ArrayBuffer.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 187,
              "column": 2
            },
            "end": {
              "line": 205,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "body",
              "type": "(Blob | BufferSource | FormData | URLSearchParams | String)",
              "description": "An object\nto pass to the Request object as a body property."
            }
          ],
          "return": {
            "type": "Promise",
            "desc": "Resolved promise with the ArrayBuffer. It will reject\nif the browser doesn't support this method."
          }
        }
      ],
      "staticMethods": [],
      "demos": [
        {
          "url": "demo/index.html",
          "description": ""
        }
      ],
      "metadata": {},
      "sourceRange": {
        "start": {
          "line": 44,
          "column": 0
        },
        "end": {
          "line": 206,
          "column": 1
        }
      },
      "privacy": "public",
      "superclass": "PolymerElement",
      "name": "LogicElements.BytesCounter",
      "attributes": [
        {
          "name": "value",
          "description": "A value to be evaluated.\nIt can be text, blob (and therefore File), ArrayBuffer or FormData",
          "sourceRange": {
            "start": {
              "line": 54,
              "column": 6
            },
            "end": {
              "line": 57,
              "column": 7
            }
          },
          "metadata": {},
          "type": "string | null | undefined"
        },
        {
          "name": "bytes",
          "description": "Calculated number of bytes from the `value`",
          "sourceRange": {
            "start": {
              "line": 61,
              "column": 6
            },
            "end": {
              "line": 65,
              "column": 7
            }
          },
          "metadata": {},
          "type": "number | null | undefined"
        }
      ],
      "events": [
        {
          "type": "CustomEvent",
          "name": "bytes-changed",
          "description": "Fired when the `bytes` property changes.",
          "metadata": {}
        }
      ],
      "styling": {
        "cssVariables": [],
        "selectors": []
      },
      "slots": [],
      "tagname": "bytes-counter"
    }
  ]
}
